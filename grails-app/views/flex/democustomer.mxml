<?xml version="1.0" encoding="utf-8"?>

<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns="*"
    preinitialize="init()">
   
    <fx:Script>
        <![CDATA[
			import democustomer.Customer;
			import democustomer.CustomerService;
			
			import mx.collections.ListCollectionView;
			import mx.core.Container;
			
			import org.granite.tide.data.ChangeMerger;
			import org.granite.tide.data.DataObserver;
			import org.granite.tide.events.TideFaultEvent;
			import org.granite.tide.events.TideResultEvent;
			import org.granite.tide.service.SimpleServerApp;
			import org.granite.tide.spring.Context;
			import org.granite.tide.spring.Identity;
			import org.granite.tide.spring.PagedQuery;
			import org.granite.tide.spring.Spring;
            
			
            [Bindable] [Inject]
    		public var identity:Identity;
            
			
            private function init():void {
            	Spring.getInstance().initApplication();
            	
				Spring.getInstance().mainServerSession.serverApp = new SimpleServerApp("/democustomer", false, "localhost", "8080");
				
				// Register a PagedQuery component to display the list of customers
				Spring.getInstance().addComponentWithFactory("customerList", PagedQuery, { maxResults: 36, methodName: "list", 
					remoteComponentClass: CustomerService, elementClass: Customer });
				
	            // Register a data observer component with the name of the topic
				Spring.getInstance().addComponent("customerTopic", DataObserver, false, true);
				Spring.getInstance().addComponents([ChangeMerger]);
				// Binds the subscribe and unsubscribe methods of the component to the application login/logout events
				Spring.getInstance().addEventObserver("org.granite.tide.login", "customerTopic", "subscribe");
				Spring.getInstance().addEventObserver("org.granite.tide.logout", "customerTopic", "unsubscribe");
			}
        ]]>
    </fx:Script>
	
	<mx:ViewStack id="appView" selectedIndex="{identity.loggedIn ? 1 : 0}" width="100%" height="100%">
		<s:NavigatorContent>
			<LoginView id="loginView" width="100%" height="100%"/>
		</s:NavigatorContent>
       	
		<s:NavigatorContent>
			<MainView id="mainView" width="100%" height="100%"/>
		</s:NavigatorContent>
	</mx:ViewStack>
</s:Application>
